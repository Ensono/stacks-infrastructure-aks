#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and domain will produce a name of `$company-$project-$stage-$domain`          #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$domain`                                                                                      #
#############################################################################################################################
name: '$(Build.SourceBranchName)-init'

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: refs/tags/v2.0.1
      endpoint: amidostacks
  containers:
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.12
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.8

variables:
  company: amido
  project: stacks
  domain: core
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]
  version_build_number: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"
  # SelfConfig
  self_repo: stacks-infrastructure-aks
  self_repo_dir: "$(Agent.BuildDirectory)/s/$(self_repo)"
  self_repo_tf_src: deploy/azure/infra/stacks-aks
  self_repo_tf_dir: "$(self_repo_dir)/$(self_repo_tf_src)"
  self_pipeline_repo: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  self_pipeline_scripts_dir: "$(self_pipeline_repo)/scripts"
  # TF STATE CONFIG
  tf_state_rg: "Stacks-Ancillary-Resources"
  tf_state_storage: "amidostackstfstate"
  tf_state_container: "tfstate"
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `** all states will be saved under this key for this definition
  # avoid running anything past dev that is not on master
  # sample value: sharedservices
  tf_state_key: "core-sharedservices"
  # Scripts directory used by pipeline steps
  scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
  # AKS/AZURE
  # This will always be predictably named by setting your company - project - stage - location - compnonent names above
  # IT IS SET per stage as an output to be consumed by deploy stage
  aks_cluster_version: "1.20.7"
  region: "westeurope"
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-20.04
  # Ensure you find this definition in the K8s and Azure steps to prefix with desired subdomain assignment
  base_domain_nonprod: nonprod.amidostacks.com
  base_domain_internal_nonprod: nonprod.amidostacks.internal
  base_domain_prod: prod.amidostacks.com
  base_domain_internal_prod: prod.amidostacks.internal
  # Yamllint
  yamllint_config_file: "${{ variables.self_repo_dir }}/yamllint.conf"
  yamllint_scan_directory: "."
  # Resource grup that the DNS zones are in
  create_dns_zone: false
  dns_resource_group: Stacks-Ancillary-Resources

stages:
  - stage: Build
    jobs:
      - job: Validate
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - checkout: self

          - checkout: templates

          # Updates the build number in Azure DevOps (requires refresh in the UI to see)
          - bash: |
              echo '##vso[build.updatebuildnumber]$(version_build_number)'
            displayName: 'Update: Build Number'

          # Validates all YAML files in the repo to check they adhere to standards
          - template: azDevOps/azure/templates/v3/steps/build/test-validate-yaml.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Runs a terraform fomatting check and a validation check
          - template: azDevOps/azure/templates/v3/steps/build/test-validate-terraform.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              terraform_container: "terraform_custom"
              terraform_directory: "${{ variables.self_repo_tf_dir }}"

  # Called Non-Prod instead of Dev as all Non-Production stages will deploy to here
  - stage: NonProd
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-nonprod

      # Pull in the non-production credentials for the build to use
      - group: stacks-credentials-nonprod-kv
      - name: Environment.ShortName
        value: nonprod
    jobs:
      - deployment: InfraNonProd
        environment: ${{ variables.domain }}-nonprod
        variables:
          ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
          ARM_CLIENT_ID: $(azure-client-id)
          ARM_CLIENT_SECRET: $(azure-client-secret)
          ARM_TENANT_ID: $(azure-tenant-id)
        pool:
          vmImage: $(pool_vm_image)
        container: terraform_custom
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '$(self_repo_tf_dir)'
                    # changing this would require changing the downstream consumers of these outputs
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: $(ARM_CLIENT_ID)
                    terraform_backend_client_secret: $(ARM_CLIENT_SECRET)
                    terraform_backend_tenant_id: $(ARM_TENANT_ID)
                    terraform_backend_subscription_id: $(ARM_SUBSCRIPTION_ID)
                    terraform_state_rg: $(tf_state_rg)
                    terraform_state_storage: $(tf_state_storage)
                    terraform_state_container: $(tf_state_container)
                    terraform_state_key: $(tf_state_key)
                    terraform_state_workspace: nonprod
                    # Azure Config
                    azure_client_id: "$(ARM_CLIENT_ID)"
                    azure_client_secret: "$(ARM_CLIENT_SECRET)"
                    azure_tenant_id: "$(ARM_TENANT_ID)"
                    azure_subscription_id: "$(ARM_SUBSCRIPTION_ID)"
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_resource_group_location: $(region),
                      TF_VAR_name_company: $(company),
                      TF_VAR_name_project: $(project),
                      TF_VAR_name_component: $(domain),
                      TF_VAR_name_environment: nonprod,
                      TF_VAR_create_acr: true,
                      TF_VAR_acme_email: "stacks@amido.com",
                      TF_VAR_is_cluster_private: true,
                      TF_VAR_cluster_version: $(aks_cluster_version),
                      TF_VAR_stage: nonprod,
                      TF_VAR_key_vault_name: "$(project)-$(domain)-nonprod-euw",
                      TF_VAR_dns_zone: $(base_domain_nonprod),
                      TF_VAR_internal_dns_zone: $(base_domain_internal_nonprod),
                      TF_VAR_pfx_password: "Password1",
                      TF_VAR_create_dns_zone: $(create_dns_zone),
                      TF_VAR_dns_resource_group: $(dns_resource_group),
                      TF_VAR_create_aksvnet: true,
                      TF_VAR_create_user_identity: true,
                      TF_VAR_acr_resource_group: "",
                      TF_VAR_log_application_type: "other",
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k | ascii_upcase);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<<"$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: K8sNonProd
        dependsOn: InfraNonProd
        environment: ${{ variables.domain }}-nonprod
        variables:
          AKS_DEFAULT_USER_IDENTITY_CLIENT_ID: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.AKS_DEFAULT_USER_IDENTITY_CLIENT_ID'] ]
          AKS_DEFAULT_USER_IDENTITY_ID: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.AKS_DEFAULT_USER_IDENTITY_ID'] ]
          AKS_DEFAULT_USER_IDENTITY_NAME: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.AKS_DEFAULT_USER_IDENTITY_NAME'] ]
          AKS_INGRESS_PUBLIC_IP: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.AKS_INGRESS_PUBLIC_IP'] ]
          AKS_INGRESS_PRIVATE_IP: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.AKS_INGRESS_PRIVATE_IP'] ]
          RESOURCE_GROUP: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.RESOURCE_GROUP_NAME'] ]
          AKS_RESOURCE_GROUP: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.AKS_RESOURCE_GROUP_NAME'] ]
          AKS_CLUSTER_NAME: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.AKS_CLUSTER_NAME'] ]
          ACR_REGISTRY_NAME: $[ dependencies.InfraNonProd.outputs['InfraNonProd.tfoutputs.ACR_REGISTRY_NAME'] ]
        pool:
          vmImage: $(pool_vm_image)
        container: k8s_deploy
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: $(scripts_dir)
                    # comment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    enable_debug: "yes"
                    template_input: [
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_external-dns.yml,
                        out: $(self_repo_dir)/deploy/k8s_manifests/aks/external-dns.yml,
                        displayName: ExternalDns,
                        env_vars: {
                          domain_filter: $(base_domain_nonprod),
                          aks_resource_group: $(AKS_RESOURCE_GROUP),
                        },
                        args: "-no-empty"
                      },
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_aadpodidentity.yml,
                        displayName: AADPodId,
                        env_vars: {
                          user_identity_id: $(AKS_DEFAULT_USER_IDENTITY_ID),
                          identity_client_id: $(AKS_DEFAULT_USER_IDENTITY_CLIENT_ID),
                          identity_user_name: $(AKS_DEFAULT_USER_IDENTITY_NAME),
                        },
                        args: "-no-empty"
                      },
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_aadpodidentitybinding.yml,
                        displayName: AADPodIdBinding,
                        env_vars: {
                          identity_user_name: $(AKS_DEFAULT_USER_IDENTITY_NAME),
                        },
                        args: "-no-empty"
                      },
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_nginx-ingress.yml,
                        out: $(self_repo_dir)/deploy/k8s_manifests/aks/nginx-ingress.yml,
                        displayName: NginxIngress,
                        env_vars: {
                          aks_ingress_ip: $(AKS_INGRESS_PRIVATE_IP),
                          LB_IS_INTERNAL: "true",
                        },
                        args: "-no-empty"
                      }
                    ]

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-cluster.yml@templates
                  parameters:
                    scripts_dir: $(scripts_dir)
                    azure_tenant_id: $(azure-tenant-id)
                    azure_subscription_id: $(azure-subscription-id)
                    azure_client_id: $(azure-client-id)
                    azure_client_secret: $(azure-client-secret)
                    aks_cluster_name: $(AKS_CLUSTER_NAME)
                    aks_resource_group_name: $(AKS_RESOURCE_GROUP)
                    aks_dns_resource_group_name: $(AKS_RESOURCE_GROUP)
                    aks_set_acr_perms: false
                    aks_deploy_gatekeeper: false
                    aks_aad_pod_identity: false
                    aks_aad_pod_identity_yaml: {
                      aad_id_yml: $(self_repo_dir)/deploy/k8s_manifests/aks/aadpodidentity.yml,
                      aad_id_binding_yml: $(self_repo_dir)/deploy/k8s_manifests/aks/aadpodidentitybinding.yml
                    }
                    acr_name: $(docker_container_registry_name)
                    acr_resource_group_name: $(AKS_RESOURCE_GROUP)
                    ingress_definition:
                      - $(self_repo_dir)/deploy/k8s_manifests/aks/nginx-ingress.yml
                    external_dns: false
                    external_dns_yml: $(self_repo_dir)/deploy/k8s_manifests/aks/external-dns.yml
                    domain_filter: $(base_domain_nonprod)

  - stage: Prod
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-prod

      # Pull in the production credentials for the build to use
      - group: stacks-credentials-prod-kv
      - name: Environment.ShortName
        value: prod
    jobs:
      - deployment: InfraProd
        environment: ${{ variables.domain }}-prod
        variables:
          ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
          ARM_CLIENT_ID: $(azure-client-id)
          ARM_CLIENT_SECRET: $(azure-client-secret)
          ARM_TENANT_ID: $(azure-tenant-id)
        pool:
          vmImage: $(pool_vm_image)
        container: terraform_custom
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '$(self_repo_tf_dir)'
                    # changing this would require changing the downstream consumers of these outputs
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: $(ARM_CLIENT_ID)
                    terraform_backend_client_secret: $(ARM_CLIENT_SECRET)
                    terraform_backend_tenant_id: $(ARM_TENANT_ID)
                    terraform_backend_subscription_id: $(ARM_SUBSCRIPTION_ID)
                    terraform_state_rg: $(tf_state_rg)
                    terraform_state_storage: $(tf_state_storage)
                    terraform_state_container: $(tf_state_container)
                    terraform_state_key: $(tf_state_key)
                    # Azure Config
                    azure_client_id: "$(ARM_CLIENT_ID)"
                    azure_client_secret: "$(ARM_CLIENT_SECRET)"
                    azure_tenant_id: "$(ARM_TENANT_ID)"
                    azure_subscription_id: "$(ARM_SUBSCRIPTION_ID)"
                    terraform_state_workspace: prod
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_resource_group_location: $(region),
                      TF_VAR_name_company: $(company),
                      TF_VAR_name_project: $(project),
                      TF_VAR_name_component: $(domain),
                      TF_VAR_name_environment: prod,
                      TF_VAR_create_acr: true,
                      TF_VAR_acme_email: "stacks@amido.com",
                      TF_VAR_is_cluster_private: true,
                      TF_VAR_cluster_version: $(aks_cluster_version),
                      TF_VAR_stage: prod,
                      TF_VAR_key_vault_name: "$(project)-$(domain)-prod-euw",
                      TF_VAR_dns_zone: $(base_domain_prod),
                      TF_VAR_internal_dns_zone: $(base_domain_internal_prod),
                      TF_VAR_pfx_password: "Password1",
                      TF_VAR_create_dns_zone: $(create_dns_zone),
                      TF_VAR_dns_resource_group: $(dns_resource_group),
                      TF_VAR_create_aksvnet: true,
                      TF_VAR_create_user_identity: true,
                      TF_VAR_acr_resource_group: "",
                      TF_VAR_log_application_type: "other",
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k | ascii_upcase);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<<"$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: K8sProd
        dependsOn: InfraProd
        environment: ${{ variables.domain}}-prod
        variables:
          AKS_DEFAULT_USER_IDENTITY_CLIENT_ID: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.AKS_DEFAULT_USER_IDENTITY_CLIENT_ID'] ]
          AKS_DEFAULT_USER_IDENTITY_ID: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.AKS_DEFAULT_USER_IDENTITY_ID'] ]
          AKS_DEFAULT_USER_IDENTITY_NAME: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.AKS_DEFAULT_USER_IDENTITY_NAME'] ]
          AKS_INGRESS_PUBLIC_IP: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.AKS_INGRESS_PUBLIC_IP'] ]
          AKS_INGRESS_PRIVATE_IP: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.AKS_INGRESS_PRIVATE_IP'] ]
          RESOURCE_GROUP: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.RESOURCE_GROUP_NAME'] ]
          AKS_RESOURCE_GROUP: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.AKS_RESOURCE_GROUP_NAME'] ]
          AKS_CLUSTER_NAME: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.AKS_CLUSTER_NAME'] ]
          ACR_REGISTRY_NAME: $[ dependencies.InfraProd.outputs['InfraProd.tfoutputs.ACR_REGISTRY_NAME'] ]
        pool:
          vmImage: $(pool_vm_image)
        container: k8s_deploy
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: $(scripts_dir)
                    # comment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    enable_debug: "yes"
                    template_input: [
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_external-dns.yml,
                        out: $(self_repo_dir)/deploy/k8s_manifests/aks/external-dns.yml,
                        displayName: ExternalDns,
                        env_vars: {
                          domain_filter: $(base_domain_prod),
                          aks_resource_group: $(AKS_RESOURCE_GROUP),
                        },
                        args: "-no-empty"
                      },
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_aadpodidentity.yml,
                        displayName: AADPodId,
                        env_vars: {
                          user_identity_id: $(AKS_DEFAULT_USER_IDENTITY_ID),
                          identity_client_id: $(AKS_DEFAULT_USER_IDENTITY_CLIENT_ID),
                          identity_user_name: $(AKS_DEFAULT_USER_IDENTITY_NAME),
                        },
                        args: "-no-empty"
                      },
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_aadpodidentitybinding.yml,
                        displayName: AADPodIdBinding,
                        env_vars: {
                          identity_user_name: $(AKS_DEFAULT_USER_IDENTITY_NAME)
                        },
                        args: "-no-empty"
                      },
                      {
                        base: $(self_repo_dir)/deploy/k8s_manifests/aks/base_nginx-ingress.yml,
                        out: $(self_repo_dir)/deploy/k8s_manifests/aks/nginx-ingress.yml,
                        displayName: NginxIngress,
                        env_vars: {
                          aks_ingress_ip: $(AKS_INGRESS_PRIVATE_IP),
                          LB_IS_INTERNAL: "true",
                        },
                        args: "-no-empty"
                      }
                    ]

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-cluster.yml@templates
                  parameters:
                    scripts_dir: $(scripts_dir)
                    azure_tenant_id: $(azure-tenant-id)
                    azure_subscription_id: $(azure-subscription-id)
                    azure_client_id: $(azure-client-id)
                    azure_client_secret: $(azure-client-secret)
                    aks_cluster_name: $(AKS_CLUSTER_NAME)
                    aks_resource_group_name: $(AKS_RESOURCE_GROUP)
                    aks_dns_resource_group_name: $(AKS_RESOURCE_GROUP)
                    aks_set_acr_perms: false
                    aks_deploy_gatekeeper: false
                    aks_aad_pod_identity: false
                    aks_aad_pod_identity_yaml: {
                      aad_id_yml: $(self_repo_dir)/deploy/k8s_manifests/aks/aadpodidentity.yml,
                      aad_id_binding_yml: $(self_repo_dir)/deploy/k8s_manifests/aks/aadpodidentitybinding.yml,
                    }
                    acr_name: $(docker_container_registry_name)
                    acr_resource_group_name: $(AKS_RESOURCE_GROUP)
                    ingress_definition:
                      - $(self_repo_dir)/deploy/k8s_manifests/aks/nginx-ingress.yml
                    external_dns: false
                    external_dns_yml: $(self_repo_dir)/deploy/k8s_manifests/aks/external-dns.yml
                    domain_filter: $(base_domain_prod)
